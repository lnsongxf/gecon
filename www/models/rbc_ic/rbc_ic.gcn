# ###################################################################
# (c) Kancelaria Prezesa Rady Ministrów 2012-2014                   #
# Treść licencji w pliku:                                           #
# http://gecon.r-forge.r-project.org/files/gEcon_licence.txt        #
#                                                                   #
# (c) Chancellery of the Prime Minister 2012-2014                   #
# Licence terms can be found in the file:                           #
# http://gecon.r-forge.r-project.org/files/gEcon_licence.txt        #
#                                                                   #
# Author(s): Grzegorz Klima, Karol Podemski,                        #
#            Kaja Retkiewicz-Wijtiwiak                              #
# ###################################################################
# RBC model with installation costs
# ###################################################################

options
{
    output logfile = TRUE;
    output LaTeX = TRUE;
};

tryreduce
{
    K_d[], L_d[], pi[];
};

block CONSUMER
{
    definitions
    {
        u[] = (C[]^mu * (1 - L_s[])^(1 - mu))^(1 - eta) / (1 - eta);
    };
    controls
    {
        K_s[], C[], L_s[], I[];
    };
    objective
    {
        U[] = u[] + beta * E[][U[1]];
    };
    constraints
    {
        I[] + C[] = pi[] + r[] * K_s[-1] + W[] * L_s[] - psi * K_s[-1] * (I[] / K_s[-1] - delta)^2;
        K_s[] = (1 - delta) * K_s[-1] + I[];
    };
    calibration
    {
        delta = 0.025;
        beta = 0.99;
        eta = 2;
        mu = 0.3;
        psi = 0.8;
    };
};

block FIRM
{
    controls
    {
        K_d[], L_d[], Y[];
    };
    objective
    {
        pi[] = Y[] - L_d[] * W[] - r[] * K_d[];
    };
    constraints
    {
        Y[] = Z[] * K_d[]^alpha * L_d[]^(1 - alpha);
    };
    calibration
    {
        r[ss] * K_s[ss] = 0.36 * Y[ss] -> alpha;
    };
};

block EQUILIBRIUM
{
    identities
    {
        K_d[] = K_s[-1];
        L_d[] = L_s[];
    };
};

block EXOG 
{
    identities
    {
        Z[] = exp(phi * log(Z[-1]) + epsilon_Z[]);
    };
    shocks
    {
        epsilon_Z[];
    };
    calibration
    {
        phi = 0.95;
    };
};
