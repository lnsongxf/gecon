# ############################################################################
# (c) Karol Podemski 2016                                                    #
#                                                                            #
# Authors: Karol Podemski                                                    #
# ############################################################################
# DSGE model based on Smets Wouters (2003), with corrected equations:
# - (31) The correct loglinearised law of motion for the capital
#        should be written as: K[] = (1 - tau) * K[-1] + tau * I[].
# - (35) The goods market equilibrium condition should be written as:
#        Y_P[] = (1 - tau * k_Y - g_Y) * C[] + tau * k_Y * I[] +
#                g_Y * epsilon_G[] + k_Y * r_k_bar * r_k[] * psi
#        In the [SW'03] the last term accounting for
#        the cost of capacity utilisation was missing.
# The shock $\eta^Q_t$ from equation (30) has not been introduced.
#
# In addition, following the authors many shocks were ''normalized'' 
# i.e. coefficients appearing in log-linearised equations 
# in front of them were removed, among others:
# - (epsilon_b[] - E[][epsilon_b[1]]) * (1 - h) / ((1 + h) * sigma_c) 
#   was replaced by epsilon_b[],
# - beta * (E[][epsilon_I[1]] - epsilon_I[]) / (1 + beta) was replaced by
#   epsilon_i[],
# - coefficients before eta_p[] and eta_w[] in equations (32) and (33)
#   respectively were set to 1.
# ############################################################################
options
{
    output LaTeX = TRUE; 
    output LaTeX landscape = TRUE;
    output logfile = TRUE;
    verbose = TRUE;
}

block SW
{
    identities
    {
        # ######################################################################################################
        # Sticky-price block
        C[] = h / (1 + h) * C[-1] + 1 / (1 + h) * E[][C[1]] - (1 - h) / ((1 + h) * sigma_c) * (R[] - E[][pi[1]]) +
                    epsilon_b[];
        I[] = 1 / (1 + beta) * I[-1] + beta / (1 + beta) * E[][I[1]] + (1 /varphi) / (1 + beta) * Q[] - epsilon_I[];
        Q[] = -(R[] - E[][pi[1]]) + (1 - tau) / (1 - tau + r_k_bar) * E[][Q[1]] + r_k_bar / (1 - tau + r_k_bar) * E[][r_k[1]];	
        K[] = (1 - tau) * K[-1] + tau * I[];
        pi[] = beta / (1 + beta * gamma_p) * E[][pi[1]] + gamma_p / (1 + beta * gamma_p) * pi[-1] + 
                1 / (1 + beta * gamma_p) * (1 - beta * xi_p) * (1 - xi_p) / xi_p * (alpha * r_k[] + (1 - alpha) * W[] - epsilon_a[]) + eta_p[];
        W[] = (beta / (1 + beta)) * E[][W[1]] + (1 / (1 + beta)) * W[-1] + (beta / (1 + beta)) * E[][pi[1]] - ((1 + beta * gamma_w) / (1 + beta)) * pi[] + (gamma_w / (1 + beta)) * pi[-1] -
                (1 / (1 + beta)) * (((1 - beta * xi_w) * (1 - xi_w)) / ((1 + ((1 + lambda_w) * sigma_l) / lambda_w) * xi_w)) * 
                (W[] - sigma_l * L[] - (sigma_c / (1 - h)) * (C[] - h * C[-1]) - epsilon_L[]) - eta_w[];
        L[] = -W[] + (1 + (1 / psi)) * r_k[] + K[-1];
        Y[] = (1 - tau * k_Y - g_Y) * C[] + tau * k_Y * I[] + epsilon_G[] + k_Y * r_k_bar * r_k[] * (1 / psi);
        Y[] = phi * epsilon_a[] + phi * alpha * K[-1] + phi * alpha * (1 / (1 / psi)) * r_k[] + phi * (1 - alpha) * L[];
        R[] = rho * R[-1] + (1 - rho) * (pi_bar[] + r_pi * (pi[-1] - pi_bar[]) + r_Y * (Y[] - Y_P[])) + r_Delta_pi * (pi[] - pi[-1]) + r_Delta_Y * (Y[] - Y_P[] - (Y[-1] - Y_P[-1])) + eta_R[];

        # ######################################################################################################
        # Flexible block
        C_f[] = h / (1 + h) * C_f[-1] + 1 / (1 + h) * E[][C_f[1]] - (1 - h) / ((1 + h) * sigma_c) * (R_f[] - E[][pi_f[1]]) +
                    epsilon_b[];      
        I_f[] = 1 / (1 + beta) * I_f[-1] + beta / (1 + beta) * E[][I_f[1]] + (1 / varphi) / (1 + beta) * Q_f[] - epsilon_I[];
        Q_f[] = -(R_f[] - E[][pi_f[1]]) + (1 - tau) / (1 - tau + r_k_bar) * E[][Q_f[1]] + r_k_bar / (1 - tau + r_k_bar) * E[][r_k_f[1]];
        K_f[] = (1 - tau) * K_f[-1] + tau * I_f[];
        pi_f[] = 0;
        L_f[] = -w_f[] + (1 + (1 / psi)) * r_k_f[] + K_f[-1];
        Y_P[] = (1 - tau * k_Y - g_Y) * C_f[] + tau * k_Y * I_f[] + epsilon_G[] + k_Y * r_k_bar * r_k_f[] * (1 / psi);
        Y_P[] = phi * epsilon_a[] + phi * alpha * K_f[-1] + phi * alpha * (1 / psi) * r_k_f[] + phi * (1 - alpha) * L_f[];
        w_f[] = sigma_l * L_f[] + sigma_c / (1 - h) * (C_f[] - h * C_f[-1]) - epsilon_L[];   
        epsilon_a[] =  alpha * r_k_f[] + (1 - alpha)*w_f[];
        Emp[] = Emp[-1] + E[][Emp[1]] - Emp[] + (L[] - Emp[])*((1 - xi_e)*(1 -xi_e * beta) / (xi_e)); 
    }
    calibration
    {
        beta = 0.99;
        sigma_c = 1.353;
        tau = 0.025;
        alpha = 0.3;
        psi = 0.169;        
        gamma_p = 0.469;  
        gamma_w = 0.763;       
        lambda_w = 0.5; 
        xi_p = 0.908; 
        xi_w = 0.737;  
        sigma_l = 2.4;            
        h = 0.573;  
        phi = 1.408;  
        varphi = 6.771; 
        r_k_bar = 0.0351;
        k_Y = 8.8;
        xi_e = 0.5;
        g_Y = 0.18;        
        r_Delta_Y = 0.159;
        r_pi = 1.684;
        r_Y = 0.099;
        r_Delta_pi = 0.14;               
        rho = 0.961;
    }
}

block EXOG 
{
    identities
    {    
        epsilon_a[] = rho_a * epsilon_a[-1] + eta_a[];
        epsilon_b[] = rho_b * epsilon_b[-1] + eta_b[];
        epsilon_G[] = rho_G * epsilon_G[-1] + eta_G[];
        epsilon_I[] = rho_I * epsilon_I[-1] + eta_I[];
        epsilon_L[] = rho_L * epsilon_L[-1] + eta_L[];
        pi_bar[] = rho_pi_bar * pi_bar[-1]  + eta_pi[];
    }
    shocks
    {           
        eta_a[],
        eta_b[],
        eta_G[],
        eta_I[],
        eta_L[],
        eta_pi[],
        eta_R[],
        eta_p[],
        eta_w[];
    }
    calibration
    {
        rho_a = 0.823;
        rho_b = 0.855;
        rho_G = 0.949;
        rho_L = 0.889;        
        rho_pi_bar = 0.924;
        rho_I = 0.927;
    }
}
